// Copyright (c) 2025 Benjamin Borbe All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	gentype "k8s.io/client-go/gentype"

	v1beta2 "github.com/bborbe/strimzi/k8s/apis/kafka.strimzi.io/v1beta2"
	kafkastrimziiov1beta2 "github.com/bborbe/strimzi/k8s/client/applyconfiguration/kafka.strimzi.io/v1beta2"
	typedkafkastrimziiov1beta2 "github.com/bborbe/strimzi/k8s/client/clientset/versioned/typed/kafka.strimzi.io/v1beta2"
)

// fakeKafkaTopics implements KafkaTopicInterface
type fakeKafkaTopics struct {
	*gentype.FakeClientWithListAndApply[*v1beta2.KafkaTopic, *v1beta2.KafkaTopicList, *kafkastrimziiov1beta2.KafkaTopicApplyConfiguration]
	Fake *FakeKafkaV1beta2
}

func newFakeKafkaTopics(fake *FakeKafkaV1beta2, namespace string) typedkafkastrimziiov1beta2.KafkaTopicInterface {
	return &fakeKafkaTopics{
		gentype.NewFakeClientWithListAndApply[*v1beta2.KafkaTopic, *v1beta2.KafkaTopicList, *kafkastrimziiov1beta2.KafkaTopicApplyConfiguration](
			fake.Fake,
			namespace,
			v1beta2.SchemeGroupVersion.WithResource("kafkatopics"),
			v1beta2.SchemeGroupVersion.WithKind("KafkaTopic"),
			func() *v1beta2.KafkaTopic { return &v1beta2.KafkaTopic{} },
			func() *v1beta2.KafkaTopicList { return &v1beta2.KafkaTopicList{} },
			func(dst, src *v1beta2.KafkaTopicList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta2.KafkaTopicList) []*v1beta2.KafkaTopic { return gentype.ToPointerSlice(list.Items) },
			func(list *v1beta2.KafkaTopicList, items []*v1beta2.KafkaTopic) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
