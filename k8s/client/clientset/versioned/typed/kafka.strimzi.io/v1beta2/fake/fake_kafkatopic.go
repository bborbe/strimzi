// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1beta2 "github.com/bborbe/strimzi/k8s/apis/kafka.strimzi.io/v1beta2"
	kafkastrimziiov1beta2 "github.com/bborbe/strimzi/k8s/client/applyconfiguration/kafka.strimzi.io/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKafkaTopics implements KafkaTopicInterface
type FakeKafkaTopics struct {
	Fake *FakeKafkaV1beta2
	ns   string
}

var kafkatopicsResource = v1beta2.SchemeGroupVersion.WithResource("kafkatopics")

var kafkatopicsKind = v1beta2.SchemeGroupVersion.WithKind("KafkaTopic")

// Get takes name of the kafkaTopic, and returns the corresponding kafkaTopic object, and an error if there is any.
func (c *FakeKafkaTopics) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta2.KafkaTopic, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(kafkatopicsResource, c.ns, name), &v1beta2.KafkaTopic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.KafkaTopic), err
}

// List takes label and field selectors, and returns the list of KafkaTopics that match those selectors.
func (c *FakeKafkaTopics) List(ctx context.Context, opts v1.ListOptions) (result *v1beta2.KafkaTopicList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(kafkatopicsResource, kafkatopicsKind, c.ns, opts), &v1beta2.KafkaTopicList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta2.KafkaTopicList{ListMeta: obj.(*v1beta2.KafkaTopicList).ListMeta}
	for _, item := range obj.(*v1beta2.KafkaTopicList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kafkaTopics.
func (c *FakeKafkaTopics) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(kafkatopicsResource, c.ns, opts))

}

// Create takes the representation of a kafkaTopic and creates it.  Returns the server's representation of the kafkaTopic, and an error, if there is any.
func (c *FakeKafkaTopics) Create(ctx context.Context, kafkaTopic *v1beta2.KafkaTopic, opts v1.CreateOptions) (result *v1beta2.KafkaTopic, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(kafkatopicsResource, c.ns, kafkaTopic), &v1beta2.KafkaTopic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.KafkaTopic), err
}

// Update takes the representation of a kafkaTopic and updates it. Returns the server's representation of the kafkaTopic, and an error, if there is any.
func (c *FakeKafkaTopics) Update(ctx context.Context, kafkaTopic *v1beta2.KafkaTopic, opts v1.UpdateOptions) (result *v1beta2.KafkaTopic, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(kafkatopicsResource, c.ns, kafkaTopic), &v1beta2.KafkaTopic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.KafkaTopic), err
}

// Delete takes name of the kafkaTopic and deletes it. Returns an error if one occurs.
func (c *FakeKafkaTopics) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(kafkatopicsResource, c.ns, name, opts), &v1beta2.KafkaTopic{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKafkaTopics) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(kafkatopicsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta2.KafkaTopicList{})
	return err
}

// Patch applies the patch and returns the patched kafkaTopic.
func (c *FakeKafkaTopics) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta2.KafkaTopic, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(kafkatopicsResource, c.ns, name, pt, data, subresources...), &v1beta2.KafkaTopic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.KafkaTopic), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied kafkaTopic.
func (c *FakeKafkaTopics) Apply(ctx context.Context, kafkaTopic *kafkastrimziiov1beta2.KafkaTopicApplyConfiguration, opts v1.ApplyOptions) (result *v1beta2.KafkaTopic, err error) {
	if kafkaTopic == nil {
		return nil, fmt.Errorf("kafkaTopic provided to Apply must not be nil")
	}
	data, err := json.Marshal(kafkaTopic)
	if err != nil {
		return nil, err
	}
	name := kafkaTopic.Name
	if name == nil {
		return nil, fmt.Errorf("kafkaTopic.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(kafkatopicsResource, c.ns, *name, types.ApplyPatchType, data), &v1beta2.KafkaTopic{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.KafkaTopic), err
}
