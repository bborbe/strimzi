// Copyright (c) 2025 Benjamin Borbe All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"

	v1beta2 "github.com/bborbe/strimzi/k8s/apis/kafka.strimzi.io/v1beta2"
	internal "github.com/bborbe/strimzi/k8s/client/applyconfiguration/internal"
	kafkastrimziiov1beta2 "github.com/bborbe/strimzi/k8s/client/applyconfiguration/kafka.strimzi.io/v1beta2"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=kafka, Version=v1beta2
	case v1beta2.SchemeGroupVersion.WithKind("KafkaTopic"):
		return &kafkastrimziiov1beta2.KafkaTopicApplyConfiguration{}
	case v1beta2.SchemeGroupVersion.WithKind("KafkaTopicSpec"):
		return &kafkastrimziiov1beta2.KafkaTopicSpecApplyConfiguration{}
	case v1beta2.SchemeGroupVersion.WithKind("KafkaTopicStatus"):
		return &kafkastrimziiov1beta2.KafkaTopicStatusApplyConfiguration{}
	case v1beta2.SchemeGroupVersion.WithKind("KafkaTopicStatusConditionsElem"):
		return &kafkastrimziiov1beta2.KafkaTopicStatusConditionsElemApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
