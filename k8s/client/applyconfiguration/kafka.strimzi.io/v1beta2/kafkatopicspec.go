// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/bborbe/strimzi/k8s/apis/kafka.strimzi.io/v1beta2"
)

// KafkaTopicSpecApplyConfiguration represents an declarative configuration of the KafkaTopicSpec type for use
// with apply.
type KafkaTopicSpecApplyConfiguration struct {
	Config     map[string]v1beta2.Value `json:"config,omitempty"`
	Partitions *int32                   `json:"partitions,omitempty"`
	Replicas   *int32                   `json:"replicas,omitempty"`
	TopicName  *string                  `json:"topicName,omitempty"`
}

// KafkaTopicSpecApplyConfiguration constructs an declarative configuration of the KafkaTopicSpec type for use with
// apply.
func KafkaTopicSpec() *KafkaTopicSpecApplyConfiguration {
	return &KafkaTopicSpecApplyConfiguration{}
}

// WithConfig puts the entries into the Config field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Config field,
// overwriting an existing map entries in Config field with the same key.
func (b *KafkaTopicSpecApplyConfiguration) WithConfig(entries map[string]v1beta2.Value) *KafkaTopicSpecApplyConfiguration {
	if b.Config == nil && len(entries) > 0 {
		b.Config = make(map[string]v1beta2.Value, len(entries))
	}
	for k, v := range entries {
		b.Config[k] = v
	}
	return b
}

// WithPartitions sets the Partitions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Partitions field is set to the value of the last call.
func (b *KafkaTopicSpecApplyConfiguration) WithPartitions(value int32) *KafkaTopicSpecApplyConfiguration {
	b.Partitions = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *KafkaTopicSpecApplyConfiguration) WithReplicas(value int32) *KafkaTopicSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithTopicName sets the TopicName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TopicName field is set to the value of the last call.
func (b *KafkaTopicSpecApplyConfiguration) WithTopicName(value string) *KafkaTopicSpecApplyConfiguration {
	b.TopicName = &value
	return b
}
