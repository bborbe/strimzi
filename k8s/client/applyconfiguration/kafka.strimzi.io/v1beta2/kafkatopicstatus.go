// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

// KafkaTopicStatusApplyConfiguration represents an declarative configuration of the KafkaTopicStatus type for use
// with apply.
type KafkaTopicStatusApplyConfiguration struct {
	Conditions         []KafkaTopicStatusConditionsElemApplyConfiguration `json:"conditions,omitempty"`
	ObservedGeneration *int32                                             `json:"observedGeneration,omitempty"`
	TopicName          *string                                            `json:"topicName,omitempty"`
}

// KafkaTopicStatusApplyConfiguration constructs an declarative configuration of the KafkaTopicStatus type for use with
// apply.
func KafkaTopicStatus() *KafkaTopicStatusApplyConfiguration {
	return &KafkaTopicStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *KafkaTopicStatusApplyConfiguration) WithConditions(values ...*KafkaTopicStatusConditionsElemApplyConfiguration) *KafkaTopicStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *KafkaTopicStatusApplyConfiguration) WithObservedGeneration(value int32) *KafkaTopicStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithTopicName sets the TopicName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TopicName field is set to the value of the last call.
func (b *KafkaTopicStatusApplyConfiguration) WithTopicName(value string) *KafkaTopicStatusApplyConfiguration {
	b.TopicName = &value
	return b
}
