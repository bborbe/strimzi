// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/strimzi"
	"github.com/bborbe/strimzi/k8s/client/clientset/versioned/typed/kafka.strimzi.io/v1beta2"
	"k8s.io/client-go/discovery"
)

type StrimziClientset struct {
	DiscoveryStub        func() discovery.DiscoveryInterface
	discoveryMutex       sync.RWMutex
	discoveryArgsForCall []struct {
	}
	discoveryReturns struct {
		result1 discovery.DiscoveryInterface
	}
	discoveryReturnsOnCall map[int]struct {
		result1 discovery.DiscoveryInterface
	}
	KafkaV1beta2Stub        func() v1beta2.KafkaV1beta2Interface
	kafkaV1beta2Mutex       sync.RWMutex
	kafkaV1beta2ArgsForCall []struct {
	}
	kafkaV1beta2Returns struct {
		result1 v1beta2.KafkaV1beta2Interface
	}
	kafkaV1beta2ReturnsOnCall map[int]struct {
		result1 v1beta2.KafkaV1beta2Interface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StrimziClientset) Discovery() discovery.DiscoveryInterface {
	fake.discoveryMutex.Lock()
	ret, specificReturn := fake.discoveryReturnsOnCall[len(fake.discoveryArgsForCall)]
	fake.discoveryArgsForCall = append(fake.discoveryArgsForCall, struct {
	}{})
	stub := fake.DiscoveryStub
	fakeReturns := fake.discoveryReturns
	fake.recordInvocation("Discovery", []interface{}{})
	fake.discoveryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *StrimziClientset) DiscoveryCallCount() int {
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	return len(fake.discoveryArgsForCall)
}

func (fake *StrimziClientset) DiscoveryCalls(stub func() discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = stub
}

func (fake *StrimziClientset) DiscoveryReturns(result1 discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = nil
	fake.discoveryReturns = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *StrimziClientset) DiscoveryReturnsOnCall(i int, result1 discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = nil
	if fake.discoveryReturnsOnCall == nil {
		fake.discoveryReturnsOnCall = make(map[int]struct {
			result1 discovery.DiscoveryInterface
		})
	}
	fake.discoveryReturnsOnCall[i] = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *StrimziClientset) KafkaV1beta2() v1beta2.KafkaV1beta2Interface {
	fake.kafkaV1beta2Mutex.Lock()
	ret, specificReturn := fake.kafkaV1beta2ReturnsOnCall[len(fake.kafkaV1beta2ArgsForCall)]
	fake.kafkaV1beta2ArgsForCall = append(fake.kafkaV1beta2ArgsForCall, struct {
	}{})
	stub := fake.KafkaV1beta2Stub
	fakeReturns := fake.kafkaV1beta2Returns
	fake.recordInvocation("KafkaV1beta2", []interface{}{})
	fake.kafkaV1beta2Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *StrimziClientset) KafkaV1beta2CallCount() int {
	fake.kafkaV1beta2Mutex.RLock()
	defer fake.kafkaV1beta2Mutex.RUnlock()
	return len(fake.kafkaV1beta2ArgsForCall)
}

func (fake *StrimziClientset) KafkaV1beta2Calls(stub func() v1beta2.KafkaV1beta2Interface) {
	fake.kafkaV1beta2Mutex.Lock()
	defer fake.kafkaV1beta2Mutex.Unlock()
	fake.KafkaV1beta2Stub = stub
}

func (fake *StrimziClientset) KafkaV1beta2Returns(result1 v1beta2.KafkaV1beta2Interface) {
	fake.kafkaV1beta2Mutex.Lock()
	defer fake.kafkaV1beta2Mutex.Unlock()
	fake.KafkaV1beta2Stub = nil
	fake.kafkaV1beta2Returns = struct {
		result1 v1beta2.KafkaV1beta2Interface
	}{result1}
}

func (fake *StrimziClientset) KafkaV1beta2ReturnsOnCall(i int, result1 v1beta2.KafkaV1beta2Interface) {
	fake.kafkaV1beta2Mutex.Lock()
	defer fake.kafkaV1beta2Mutex.Unlock()
	fake.KafkaV1beta2Stub = nil
	if fake.kafkaV1beta2ReturnsOnCall == nil {
		fake.kafkaV1beta2ReturnsOnCall = make(map[int]struct {
			result1 v1beta2.KafkaV1beta2Interface
		})
	}
	fake.kafkaV1beta2ReturnsOnCall[i] = struct {
		result1 v1beta2.KafkaV1beta2Interface
	}{result1}
}

func (fake *StrimziClientset) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StrimziClientset) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ strimzi.StrimziClientset = new(StrimziClientset)
