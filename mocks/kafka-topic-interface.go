// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/strimzi"
	"github.com/bborbe/strimzi/k8s/apis/kafka.strimzi.io/v1beta2"
	v1beta2a "github.com/bborbe/strimzi/k8s/client/applyconfiguration/kafka.strimzi.io/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type KafkaTopicInterface struct {
	ApplyStub        func(context.Context, *v1beta2a.KafkaTopicApplyConfiguration, v1.ApplyOptions) (*v1beta2.KafkaTopic, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta2a.KafkaTopicApplyConfiguration
		arg3 v1.ApplyOptions
	}
	applyReturns struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	CreateStub        func(context.Context, *v1beta2.KafkaTopic, v1.CreateOptions) (*v1beta2.KafkaTopic, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta2.KafkaTopic
		arg3 v1.CreateOptions
	}
	createReturns struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	DeleteStub        func(context.Context, string, v1.DeleteOptions) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 v1.DeleteOptions
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteCollectionStub        func(context.Context, v1.DeleteOptions, v1.ListOptions) error
	deleteCollectionMutex       sync.RWMutex
	deleteCollectionArgsForCall []struct {
		arg1 context.Context
		arg2 v1.DeleteOptions
		arg3 v1.ListOptions
	}
	deleteCollectionReturns struct {
		result1 error
	}
	deleteCollectionReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, string, v1.GetOptions) (*v1beta2.KafkaTopic, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 v1.GetOptions
	}
	getReturns struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	ListStub        func(context.Context, v1.ListOptions) (*v1beta2.KafkaTopicList, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 v1.ListOptions
	}
	listReturns struct {
		result1 *v1beta2.KafkaTopicList
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *v1beta2.KafkaTopicList
		result2 error
	}
	PatchStub        func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*v1beta2.KafkaTopic, error)
	patchMutex       sync.RWMutex
	patchArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 types.PatchType
		arg4 []byte
		arg5 v1.PatchOptions
		arg6 []string
	}
	patchReturns struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	patchReturnsOnCall map[int]struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	UpdateStub        func(context.Context, *v1beta2.KafkaTopic, v1.UpdateOptions) (*v1beta2.KafkaTopic, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta2.KafkaTopic
		arg3 v1.UpdateOptions
	}
	updateReturns struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}
	WatchStub        func(context.Context, v1.ListOptions) (watch.Interface, error)
	watchMutex       sync.RWMutex
	watchArgsForCall []struct {
		arg1 context.Context
		arg2 v1.ListOptions
	}
	watchReturns struct {
		result1 watch.Interface
		result2 error
	}
	watchReturnsOnCall map[int]struct {
		result1 watch.Interface
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KafkaTopicInterface) Apply(arg1 context.Context, arg2 *v1beta2a.KafkaTopicApplyConfiguration, arg3 v1.ApplyOptions) (*v1beta2.KafkaTopic, error) {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta2a.KafkaTopicApplyConfiguration
		arg3 v1.ApplyOptions
	}{arg1, arg2, arg3})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaTopicInterface) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *KafkaTopicInterface) ApplyCalls(stub func(context.Context, *v1beta2a.KafkaTopicApplyConfiguration, v1.ApplyOptions) (*v1beta2.KafkaTopic, error)) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *KafkaTopicInterface) ApplyArgsForCall(i int) (context.Context, *v1beta2a.KafkaTopicApplyConfiguration, v1.ApplyOptions) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaTopicInterface) ApplyReturns(result1 *v1beta2.KafkaTopic, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) ApplyReturnsOnCall(i int, result1 *v1beta2.KafkaTopic, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 *v1beta2.KafkaTopic
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) Create(arg1 context.Context, arg2 *v1beta2.KafkaTopic, arg3 v1.CreateOptions) (*v1beta2.KafkaTopic, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta2.KafkaTopic
		arg3 v1.CreateOptions
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaTopicInterface) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *KafkaTopicInterface) CreateCalls(stub func(context.Context, *v1beta2.KafkaTopic, v1.CreateOptions) (*v1beta2.KafkaTopic, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *KafkaTopicInterface) CreateArgsForCall(i int) (context.Context, *v1beta2.KafkaTopic, v1.CreateOptions) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaTopicInterface) CreateReturns(result1 *v1beta2.KafkaTopic, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) CreateReturnsOnCall(i int, result1 *v1beta2.KafkaTopic, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *v1beta2.KafkaTopic
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) Delete(arg1 context.Context, arg2 string, arg3 v1.DeleteOptions) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 v1.DeleteOptions
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *KafkaTopicInterface) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *KafkaTopicInterface) DeleteCalls(stub func(context.Context, string, v1.DeleteOptions) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *KafkaTopicInterface) DeleteArgsForCall(i int) (context.Context, string, v1.DeleteOptions) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaTopicInterface) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *KafkaTopicInterface) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *KafkaTopicInterface) DeleteCollection(arg1 context.Context, arg2 v1.DeleteOptions, arg3 v1.ListOptions) error {
	fake.deleteCollectionMutex.Lock()
	ret, specificReturn := fake.deleteCollectionReturnsOnCall[len(fake.deleteCollectionArgsForCall)]
	fake.deleteCollectionArgsForCall = append(fake.deleteCollectionArgsForCall, struct {
		arg1 context.Context
		arg2 v1.DeleteOptions
		arg3 v1.ListOptions
	}{arg1, arg2, arg3})
	stub := fake.DeleteCollectionStub
	fakeReturns := fake.deleteCollectionReturns
	fake.recordInvocation("DeleteCollection", []interface{}{arg1, arg2, arg3})
	fake.deleteCollectionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *KafkaTopicInterface) DeleteCollectionCallCount() int {
	fake.deleteCollectionMutex.RLock()
	defer fake.deleteCollectionMutex.RUnlock()
	return len(fake.deleteCollectionArgsForCall)
}

func (fake *KafkaTopicInterface) DeleteCollectionCalls(stub func(context.Context, v1.DeleteOptions, v1.ListOptions) error) {
	fake.deleteCollectionMutex.Lock()
	defer fake.deleteCollectionMutex.Unlock()
	fake.DeleteCollectionStub = stub
}

func (fake *KafkaTopicInterface) DeleteCollectionArgsForCall(i int) (context.Context, v1.DeleteOptions, v1.ListOptions) {
	fake.deleteCollectionMutex.RLock()
	defer fake.deleteCollectionMutex.RUnlock()
	argsForCall := fake.deleteCollectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaTopicInterface) DeleteCollectionReturns(result1 error) {
	fake.deleteCollectionMutex.Lock()
	defer fake.deleteCollectionMutex.Unlock()
	fake.DeleteCollectionStub = nil
	fake.deleteCollectionReturns = struct {
		result1 error
	}{result1}
}

func (fake *KafkaTopicInterface) DeleteCollectionReturnsOnCall(i int, result1 error) {
	fake.deleteCollectionMutex.Lock()
	defer fake.deleteCollectionMutex.Unlock()
	fake.DeleteCollectionStub = nil
	if fake.deleteCollectionReturnsOnCall == nil {
		fake.deleteCollectionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCollectionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *KafkaTopicInterface) Get(arg1 context.Context, arg2 string, arg3 v1.GetOptions) (*v1beta2.KafkaTopic, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 v1.GetOptions
	}{arg1, arg2, arg3})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaTopicInterface) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *KafkaTopicInterface) GetCalls(stub func(context.Context, string, v1.GetOptions) (*v1beta2.KafkaTopic, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *KafkaTopicInterface) GetArgsForCall(i int) (context.Context, string, v1.GetOptions) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaTopicInterface) GetReturns(result1 *v1beta2.KafkaTopic, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) GetReturnsOnCall(i int, result1 *v1beta2.KafkaTopic, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *v1beta2.KafkaTopic
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) List(arg1 context.Context, arg2 v1.ListOptions) (*v1beta2.KafkaTopicList, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 v1.ListOptions
	}{arg1, arg2})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaTopicInterface) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *KafkaTopicInterface) ListCalls(stub func(context.Context, v1.ListOptions) (*v1beta2.KafkaTopicList, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *KafkaTopicInterface) ListArgsForCall(i int) (context.Context, v1.ListOptions) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *KafkaTopicInterface) ListReturns(result1 *v1beta2.KafkaTopicList, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *v1beta2.KafkaTopicList
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) ListReturnsOnCall(i int, result1 *v1beta2.KafkaTopicList, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *v1beta2.KafkaTopicList
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *v1beta2.KafkaTopicList
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) Patch(arg1 context.Context, arg2 string, arg3 types.PatchType, arg4 []byte, arg5 v1.PatchOptions, arg6 ...string) (*v1beta2.KafkaTopic, error) {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.patchMutex.Lock()
	ret, specificReturn := fake.patchReturnsOnCall[len(fake.patchArgsForCall)]
	fake.patchArgsForCall = append(fake.patchArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 types.PatchType
		arg4 []byte
		arg5 v1.PatchOptions
		arg6 []string
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	stub := fake.PatchStub
	fakeReturns := fake.patchReturns
	fake.recordInvocation("Patch", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6})
	fake.patchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaTopicInterface) PatchCallCount() int {
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	return len(fake.patchArgsForCall)
}

func (fake *KafkaTopicInterface) PatchCalls(stub func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*v1beta2.KafkaTopic, error)) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = stub
}

func (fake *KafkaTopicInterface) PatchArgsForCall(i int) (context.Context, string, types.PatchType, []byte, v1.PatchOptions, []string) {
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	argsForCall := fake.patchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *KafkaTopicInterface) PatchReturns(result1 *v1beta2.KafkaTopic, result2 error) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = nil
	fake.patchReturns = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) PatchReturnsOnCall(i int, result1 *v1beta2.KafkaTopic, result2 error) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = nil
	if fake.patchReturnsOnCall == nil {
		fake.patchReturnsOnCall = make(map[int]struct {
			result1 *v1beta2.KafkaTopic
			result2 error
		})
	}
	fake.patchReturnsOnCall[i] = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) Update(arg1 context.Context, arg2 *v1beta2.KafkaTopic, arg3 v1.UpdateOptions) (*v1beta2.KafkaTopic, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta2.KafkaTopic
		arg3 v1.UpdateOptions
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaTopicInterface) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *KafkaTopicInterface) UpdateCalls(stub func(context.Context, *v1beta2.KafkaTopic, v1.UpdateOptions) (*v1beta2.KafkaTopic, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *KafkaTopicInterface) UpdateArgsForCall(i int) (context.Context, *v1beta2.KafkaTopic, v1.UpdateOptions) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaTopicInterface) UpdateReturns(result1 *v1beta2.KafkaTopic, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) UpdateReturnsOnCall(i int, result1 *v1beta2.KafkaTopic, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *v1beta2.KafkaTopic
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *v1beta2.KafkaTopic
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) Watch(arg1 context.Context, arg2 v1.ListOptions) (watch.Interface, error) {
	fake.watchMutex.Lock()
	ret, specificReturn := fake.watchReturnsOnCall[len(fake.watchArgsForCall)]
	fake.watchArgsForCall = append(fake.watchArgsForCall, struct {
		arg1 context.Context
		arg2 v1.ListOptions
	}{arg1, arg2})
	stub := fake.WatchStub
	fakeReturns := fake.watchReturns
	fake.recordInvocation("Watch", []interface{}{arg1, arg2})
	fake.watchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaTopicInterface) WatchCallCount() int {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	return len(fake.watchArgsForCall)
}

func (fake *KafkaTopicInterface) WatchCalls(stub func(context.Context, v1.ListOptions) (watch.Interface, error)) {
	fake.watchMutex.Lock()
	defer fake.watchMutex.Unlock()
	fake.WatchStub = stub
}

func (fake *KafkaTopicInterface) WatchArgsForCall(i int) (context.Context, v1.ListOptions) {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	argsForCall := fake.watchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *KafkaTopicInterface) WatchReturns(result1 watch.Interface, result2 error) {
	fake.watchMutex.Lock()
	defer fake.watchMutex.Unlock()
	fake.WatchStub = nil
	fake.watchReturns = struct {
		result1 watch.Interface
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) WatchReturnsOnCall(i int, result1 watch.Interface, result2 error) {
	fake.watchMutex.Lock()
	defer fake.watchMutex.Unlock()
	fake.WatchStub = nil
	if fake.watchReturnsOnCall == nil {
		fake.watchReturnsOnCall = make(map[int]struct {
			result1 watch.Interface
			result2 error
		})
	}
	fake.watchReturnsOnCall[i] = struct {
		result1 watch.Interface
		result2 error
	}{result1, result2}
}

func (fake *KafkaTopicInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.deleteCollectionMutex.RLock()
	defer fake.deleteCollectionMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KafkaTopicInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ strimzi.KafkaTopicInterface = new(KafkaTopicInterface)
